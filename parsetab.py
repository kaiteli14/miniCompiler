
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON DIVIDE ELSE EQUALS EXPONENT GREATER GREATER_EQ ID IF INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE RPAREN SEMICOLON TIMESprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement : block_statement\n                 | if_then_statementstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonif_then_statement : IF expression block_statementif_then_statement : IF expression block_statement ELSE block_statementidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | lvalue EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALlvalue : identifierexpression : lvalueepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,16,18,20,22,39,40,41,42,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,70,],[3,3,-41,-39,-40,3,-20,-18,-21,-22,3,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,3,]),'$end':([1,2,46,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,16,18,20,39,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,71,72,],[-42,22,-9,-10,-11,-12,-5,-6,-7,-18,-41,-39,-40,-20,-18,-21,-22,-4,-8,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-42,-19,-37,-38,-16,-13,-15,-14,-17,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,16,18,20,21,22,23,39,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,71,72,],[-42,-42,-9,-10,-11,-12,-5,-6,-7,-18,-41,-39,-40,46,-3,-2,-20,-18,-21,-22,-4,-8,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-42,-19,-37,-38,-16,-13,-15,-14,-17,]),'ID':([3,13,14,15,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,68,],[12,40,40,40,40,40,12,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'PLUS':([3,9,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,68,71,],[13,24,-18,13,13,13,-41,13,-39,13,-40,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-20,-18,-21,-22,13,24,24,-23,-24,-25,-26,-27,-28,24,24,24,24,24,24,24,24,24,-38,13,24,]),'MINUS':([3,9,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,68,71,],[14,25,-18,14,14,14,-41,14,-39,14,-40,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-20,-18,-21,-22,14,25,25,-23,-24,-25,-26,-27,-28,25,25,25,25,25,25,25,25,25,-38,14,25,]),'NOT':([3,13,14,15,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,68,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'LPAREN':([3,13,14,15,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,68,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'INT_LITERAL':([3,13,14,15,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,68,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'IF':([3,22,],[19,19,]),'EXPONENT':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[26,-18,-41,-39,-40,-20,-18,-21,-22,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-38,26,]),'TIMES':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[27,-18,-41,-39,-40,-20,-18,-21,-22,27,27,27,27,-25,-26,-27,-28,27,27,27,27,27,27,27,27,27,-38,27,]),'DIVIDE':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[28,-18,-41,-39,-40,-20,-18,-21,-22,28,28,28,28,-25,-26,-27,-28,28,28,28,28,28,28,28,28,28,-38,28,]),'MODULUS':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[29,-18,-41,-39,-40,-20,-18,-21,-22,29,29,29,29,-25,-26,-27,-28,29,29,29,29,29,29,29,29,29,-38,29,]),'LESS':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[30,-18,-41,-39,-40,-20,-18,-21,-22,30,30,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,30,30,30,30,30,-38,30,]),'LESS_EQ':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[31,-18,-41,-39,-40,-20,-18,-21,-22,31,31,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,31,31,31,31,31,-38,31,]),'GREATER':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[32,-18,-41,-39,-40,-20,-18,-21,-22,32,32,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,32,32,32,32,32,-38,32,]),'GREATER_EQ':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[33,-18,-41,-39,-40,-20,-18,-21,-22,33,33,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,33,33,33,33,33,-38,33,]),'IS_EQ':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[34,-18,-41,-39,-40,-20,-18,-21,-22,34,34,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,34,34,34,-38,34,]),'NOT_EQ':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[35,-18,-41,-39,-40,-20,-18,-21,-22,35,35,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,35,35,35,-38,35,]),'AND':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[36,-18,-41,-39,-40,-20,-18,-21,-22,36,36,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,36,36,-38,36,]),'OR':([9,12,16,18,20,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,71,],[37,-18,-41,-39,-40,-20,-18,-21,-22,37,37,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,37,-38,37,]),'COLON':([12,],[38,]),'EQUALS':([12,16,20,40,62,63,],[-18,43,-40,-18,68,-19,]),'RPAREN':([16,18,20,39,40,41,42,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,],[-41,-39,-40,-20,-18,-21,-22,65,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'INT':([38,],[63,]),'ELSE':([46,66,],[-4,70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,3,22,45,70,],[2,10,10,66,72,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,22,],[5,47,]),'epsilon':([3,4,62,],[6,23,69,]),'statement':([3,22,],[7,7,]),'decl':([3,22,],[8,8,]),'expression':([3,13,14,15,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,68,],[9,39,41,42,44,45,9,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,71,]),'if_then_statement':([3,22,],[11,11,]),'lvalue':([3,13,14,15,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,68,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'identifier':([3,13,14,15,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,68,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'semicolon_opt':([4,],[21,]),'type':([38,],[62,]),'Initiation':([62,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',133),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',138),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',139),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',146),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',151),
  ('statement -> block_statement','statement',1,'p_statement_A','miniFrontEnd.py',155),
  ('statement -> if_then_statement','statement',1,'p_statement_A','miniFrontEnd.py',156),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',165),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',170),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',174),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',179),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',180),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',185),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',192),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',196),
  ('if_then_statement -> IF expression block_statement','if_then_statement',3,'p_if_then_statement_A','miniFrontEnd.py',200),
  ('if_then_statement -> IF expression block_statement ELSE block_statement','if_then_statement',5,'p_if_then_statement_B','miniFrontEnd.py',204),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',211),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',215),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',224),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',225),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',226),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',232),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',233),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',234),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',235),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',236),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',237),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',238),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',239),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',240),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',241),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',242),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',243),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',244),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',245),
  ('expression -> lvalue EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',246),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',252),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',258),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',263),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','miniFrontEnd.py',268),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',279),
]
