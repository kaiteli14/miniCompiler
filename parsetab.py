
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND DIVIDE EQUALS EXPONENT GREATER GREATER_EQ ID INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE RPAREN SEMICOLON TIMESprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_list semicolon_opt RBRACEstatement : expressionstatement_list : statement_list SEMICOLON statementstatement_list : statementstatement_list : epsilonidentifier : IDexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | identifier EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : identifierepsilon :'
    
_lr_action_items = {'LBRACE':([0,],[3,]),'$end':([1,2,37,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,11,13,14,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[-31,16,-7,-8,-5,-30,-29,-9,-10,-11,-12,-6,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,]),'RBRACE':([3,4,5,6,7,11,13,14,15,16,17,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[-31,-31,-7,-8,-5,-30,-29,-9,37,-3,-2,-10,-11,-12,-6,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,]),'PLUS':([3,7,8,9,10,11,12,13,14,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[8,18,8,8,8,-30,8,-29,-9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-10,-11,-12,8,18,-13,-14,-15,-16,-17,-18,18,18,18,18,18,18,18,18,18,-28,]),'MINUS':([3,7,8,9,10,11,12,13,14,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[9,19,9,9,9,-30,9,-29,-9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-10,-11,-12,9,19,-13,-14,-15,-16,-17,-18,19,19,19,19,19,19,19,19,19,-28,]),'NOT':([3,8,9,10,12,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LPAREN':([3,8,9,10,12,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT_LITERAL':([3,8,9,10,12,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'ID':([3,8,9,10,12,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'EXPONENT':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[20,-30,-29,-9,-10,-11,-12,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-28,]),'TIMES':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[21,-30,-29,-9,-10,-11,-12,21,21,21,-15,-16,-17,-18,21,21,21,21,21,21,21,21,21,-28,]),'DIVIDE':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[22,-30,-29,-9,-10,-11,-12,22,22,22,-15,-16,-17,-18,22,22,22,22,22,22,22,22,22,-28,]),'MODULUS':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[23,-30,-29,-9,-10,-11,-12,23,23,23,-15,-16,-17,-18,23,23,23,23,23,23,23,23,23,-28,]),'LESS':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[24,-30,-29,-9,-10,-11,-12,24,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,24,24,24,24,24,-28,]),'LESS_EQ':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[25,-30,-29,-9,-10,-11,-12,25,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,25,25,25,25,25,-28,]),'GREATER':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[26,-30,-29,-9,-10,-11,-12,26,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,26,26,26,26,26,-28,]),'GREATER_EQ':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[27,-30,-29,-9,-10,-11,-12,27,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,27,27,27,27,27,-28,]),'IS_EQ':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[28,-30,-29,-9,-10,-11,-12,28,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,28,28,28,-28,]),'NOT_EQ':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[29,-30,-29,-9,-10,-11,-12,29,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,29,29,29,-28,]),'AND':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[30,-30,-29,-9,-10,-11,-12,30,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,30,30,-28,]),'OR':([7,11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[31,-30,-29,-9,-10,-11,-12,31,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,31,-28,]),'EQUALS':([11,14,],[35,-9,]),'RPAREN':([11,13,14,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[-30,-29,-9,-10,-11,-12,54,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,],[2,]),'statement_list':([3,],[4,]),'statement':([3,16,],[5,38,]),'epsilon':([3,4,],[6,17,]),'expression':([3,8,9,10,12,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[7,32,33,34,36,7,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,]),'identifier':([3,8,9,10,12,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'semicolon_opt':([4,],[15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',124),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',130),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',131),
  ('block_statement -> LBRACE statement_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',137),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',142),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list_A','miniFrontEnd.py',147),
  ('statement_list -> statement','statement_list',1,'p_statement_list_B','miniFrontEnd.py',152),
  ('statement_list -> epsilon','statement_list',1,'p_statement_list_C','miniFrontEnd.py',156),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',164),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',173),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',174),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',175),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',181),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',182),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',183),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',184),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',185),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',186),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',187),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',188),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',189),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',190),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',191),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',192),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',193),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',194),
  ('expression -> identifier EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',195),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',201),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',207),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',213),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',222),
]
