
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON DIVIDE ELSE EQUALS EXPONENT GREATER GREATER_EQ ID IF INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES WHILE WRITEprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement : block_statement\n                 | if_then_statement\n                 | while_statementwrite_statement : WRITE LPARENstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonif_then_statement : IF expression block_statementif_then_statement : IF expression block_statement ELSE block_statementwhile_statement : WHILE expression block_statementidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | lvalue EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : STRING_LITERALlvalue : identifierexpression : lvalueepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,17,19,20,23,25,42,43,44,45,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,75,],[3,3,-45,-42,-43,-44,3,-23,-21,-24,-25,3,3,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,3,]),'$end':([1,2,50,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,17,19,20,23,42,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,76,77,],[-46,25,-11,-12,-13,-14,-5,-6,-7,-8,-21,-45,-42,-43,-44,-23,-21,-24,-25,-4,-10,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-22,-40,-41,-18,-20,-15,-17,-16,-19,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,17,19,20,23,24,25,26,42,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,76,77,],[-46,-46,-11,-12,-13,-14,-5,-6,-7,-8,-21,-45,-42,-43,-44,50,-3,-2,-23,-21,-24,-25,-4,-10,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-22,-40,-41,-18,-20,-15,-17,-16,-19,]),'ID':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[13,43,43,43,43,43,43,13,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'PLUS':([3,9,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,73,76,],[14,27,-21,14,14,14,-45,14,-42,-43,14,14,-44,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-23,-21,-24,-25,14,27,27,27,-26,-27,-28,-29,-30,-31,27,27,27,27,27,27,27,27,27,-41,14,27,]),'MINUS':([3,9,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,73,76,],[15,28,-21,15,15,15,-45,15,-42,-43,15,15,-44,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-23,-21,-24,-25,15,28,28,28,-26,-27,-28,-29,-30,-31,28,28,28,28,28,28,28,28,28,-41,15,28,]),'NOT':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'LPAREN':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'INT_LITERAL':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'STRING_LITERAL':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'IF':([3,25,],[21,21,]),'WHILE':([3,25,],[22,22,]),'EXPONENT':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[29,-21,-45,-42,-43,-44,-23,-21,-24,-25,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-41,29,]),'TIMES':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[30,-21,-45,-42,-43,-44,-23,-21,-24,-25,30,30,30,30,30,-28,-29,-30,-31,30,30,30,30,30,30,30,30,30,-41,30,]),'DIVIDE':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[31,-21,-45,-42,-43,-44,-23,-21,-24,-25,31,31,31,31,31,-28,-29,-30,-31,31,31,31,31,31,31,31,31,31,-41,31,]),'MODULUS':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[32,-21,-45,-42,-43,-44,-23,-21,-24,-25,32,32,32,32,32,-28,-29,-30,-31,32,32,32,32,32,32,32,32,32,-41,32,]),'LESS':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[33,-21,-45,-42,-43,-44,-23,-21,-24,-25,33,33,33,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,33,33,33,33,33,-41,33,]),'LESS_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[34,-21,-45,-42,-43,-44,-23,-21,-24,-25,34,34,34,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,34,34,34,34,34,-41,34,]),'GREATER':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[35,-21,-45,-42,-43,-44,-23,-21,-24,-25,35,35,35,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,35,35,35,35,35,-41,35,]),'GREATER_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[36,-21,-45,-42,-43,-44,-23,-21,-24,-25,36,36,36,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,36,36,36,36,36,-41,36,]),'IS_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[37,-21,-45,-42,-43,-44,-23,-21,-24,-25,37,37,37,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,37,37,37,-41,37,]),'NOT_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[38,-21,-45,-42,-43,-44,-23,-21,-24,-25,38,38,38,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,38,38,38,-41,38,]),'AND':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[39,-21,-45,-42,-43,-44,-23,-21,-24,-25,39,39,39,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,39,39,-41,39,]),'OR':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[40,-21,-45,-42,-43,-44,-23,-21,-24,-25,40,40,40,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,40,-41,40,]),'COLON':([13,],[41,]),'EQUALS':([13,17,23,43,66,67,],[-21,46,-44,-21,73,-22,]),'RPAREN':([17,19,20,23,42,43,44,45,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,],[-45,-42,-43,-44,-23,-21,-24,-25,69,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,]),'INT':([41,],[67,]),'ELSE':([50,70,],[-4,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,3,25,48,49,75,],[2,10,10,70,71,77,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,25,],[5,51,]),'epsilon':([3,4,66,],[6,26,74,]),'statement':([3,25,],[7,7,]),'decl':([3,25,],[8,8,]),'expression':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[9,42,44,45,47,48,49,9,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,76,]),'if_then_statement':([3,25,],[11,11,]),'while_statement':([3,25,],[12,12,]),'lvalue':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'identifier':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'semicolon_opt':([4,],[24,]),'type':([41,],[66,]),'Initiation':([66,],[72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',141),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',146),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',147),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',154),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',159),
  ('statement -> block_statement','statement',1,'p_statement_A','miniFrontEnd.py',163),
  ('statement -> if_then_statement','statement',1,'p_statement_A','miniFrontEnd.py',164),
  ('statement -> while_statement','statement',1,'p_statement_A','miniFrontEnd.py',165),
  ('write_statement -> WRITE LPAREN','write_statement',2,'p_write_statement','miniFrontEnd.py',170),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',174),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',179),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',183),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',188),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',189),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',194),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',201),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',205),
  ('if_then_statement -> IF expression block_statement','if_then_statement',3,'p_if_then_statement_A','miniFrontEnd.py',209),
  ('if_then_statement -> IF expression block_statement ELSE block_statement','if_then_statement',5,'p_if_then_statement_B','miniFrontEnd.py',213),
  ('while_statement -> WHILE expression block_statement','while_statement',3,'p_while_statement','miniFrontEnd.py',217),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',224),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',228),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',237),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',238),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',239),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',245),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',246),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',247),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',248),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',249),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',250),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',251),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',252),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',253),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',254),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',255),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',256),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',257),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',258),
  ('expression -> lvalue EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',259),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',265),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',271),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string_literal','miniFrontEnd.py',276),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',281),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','miniFrontEnd.py',286),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',297),
]
