
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON COMMA DIVIDE ELSE EQUALS EXPONENT GREATER GREATER_EQ ID IF INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES WHILE WRITEprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement : block_statement\n                 | if_then_statement\n                 | while_statement\n                 | read_statement\n                 | write_statementread_statement : READ LPAREN lvalue lvalue_list RPARENlvalue_list : lvalue_list COMMA lvaluelvalue_list : epsilonwrite_statement : WRITE LPAREN expr_string expr_string_list RPARENexpr_string_list : expr_string_list COMMA expr_stringexpr_string_list : epsilonexpr_string : expressionstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonif_then_statement : IF expression block_statementif_then_statement : IF expression block_statement ELSE block_statementwhile_statement : WHILE expression block_statementidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | lvalue EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpr_string : STRING_LITERALlvalue : identifierexpression : lvalueepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,19,21,26,28,45,46,47,48,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,84,],[3,3,-53,-50,-52,3,-31,-29,-32,-33,3,3,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,3,]),'$end':([1,2,55,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,14,15,19,21,26,45,46,47,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,81,83,89,90,91,93,],[-54,28,-19,-20,-21,-22,-5,-6,-7,-8,-9,-10,-29,-53,-50,-52,-31,-29,-32,-33,-4,-18,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-54,-30,-48,-49,-26,-28,-23,-25,-24,-27,-11,-14,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,19,21,26,27,28,29,45,46,47,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,81,83,89,90,91,93,],[-54,-54,-19,-20,-21,-22,-5,-6,-7,-8,-9,-10,-29,-53,-50,-52,55,-3,-2,-31,-29,-32,-33,-4,-18,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-54,-30,-48,-49,-26,-28,-23,-25,-24,-27,-11,-14,]),'ID':([3,16,17,18,20,22,23,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,53,54,82,92,94,],[15,46,46,46,46,46,46,15,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'PLUS':([3,9,15,16,17,18,19,20,21,22,23,26,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,82,89,94,],[16,30,-29,16,16,16,-53,16,-50,16,16,-52,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-31,-29,-32,-33,16,30,30,30,16,-34,-35,-36,-37,-38,-39,30,30,30,30,30,30,30,30,30,-49,30,16,30,16,]),'MINUS':([3,9,15,16,17,18,19,20,21,22,23,26,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,82,89,94,],[17,31,-29,17,17,17,-53,17,-50,17,17,-52,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-31,-29,-32,-33,17,31,31,31,17,-34,-35,-36,-37,-38,-39,31,31,31,31,31,31,31,31,31,-49,31,17,31,17,]),'NOT':([3,16,17,18,20,22,23,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,54,82,94,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'LPAREN':([3,16,17,18,20,22,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,54,82,94,],[20,20,20,20,20,20,20,53,54,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'INT_LITERAL':([3,16,17,18,20,22,23,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,54,82,94,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'IF':([3,28,],[22,22,]),'WHILE':([3,28,],[23,23,]),'READ':([3,28,],[24,24,]),'WRITE':([3,28,],[25,25,]),'EXPONENT':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[32,-29,-53,-50,-52,-31,-29,-32,-33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-49,32,32,]),'TIMES':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[33,-29,-53,-50,-52,-31,-29,-32,-33,33,33,33,33,33,-36,-37,-38,-39,33,33,33,33,33,33,33,33,33,-49,33,33,]),'DIVIDE':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[34,-29,-53,-50,-52,-31,-29,-32,-33,34,34,34,34,34,-36,-37,-38,-39,34,34,34,34,34,34,34,34,34,-49,34,34,]),'MODULUS':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[35,-29,-53,-50,-52,-31,-29,-32,-33,35,35,35,35,35,-36,-37,-38,-39,35,35,35,35,35,35,35,35,35,-49,35,35,]),'LESS':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[36,-29,-53,-50,-52,-31,-29,-32,-33,36,36,36,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,36,36,36,36,36,-49,36,36,]),'LESS_EQ':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[37,-29,-53,-50,-52,-31,-29,-32,-33,37,37,37,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,37,37,37,37,37,-49,37,37,]),'GREATER':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[38,-29,-53,-50,-52,-31,-29,-32,-33,38,38,38,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,38,38,38,38,38,-49,38,38,]),'GREATER_EQ':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[39,-29,-53,-50,-52,-31,-29,-32,-33,39,39,39,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,39,39,39,39,39,-49,39,39,]),'IS_EQ':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[40,-29,-53,-50,-52,-31,-29,-32,-33,40,40,40,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,40,40,40,-49,40,40,]),'NOT_EQ':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[41,-29,-53,-50,-52,-31,-29,-32,-33,41,41,41,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,41,41,41,-49,41,41,]),'AND':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[42,-29,-53,-50,-52,-31,-29,-32,-33,42,42,42,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,42,42,-49,42,42,]),'OR':([9,15,19,21,26,45,46,47,48,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,79,89,],[43,-29,-53,-50,-52,-31,-29,-32,-33,43,43,43,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,43,-49,43,43,]),'COLON':([15,],[44,]),'EQUALS':([15,19,26,46,71,72,],[-29,49,-52,-29,82,-30,]),'RPAREN':([19,21,26,45,46,47,48,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,77,78,79,80,85,86,87,88,95,96,],[-53,-50,-52,-31,-29,-32,-33,74,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-54,-54,-17,-51,91,-13,93,-16,-12,-15,]),'COMMA':([19,21,26,45,46,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,77,78,79,80,85,86,87,88,95,96,],[-53,-50,-52,-31,-29,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-54,-54,-17,-51,92,-13,94,-16,-12,-15,]),'INT':([44,],[72,]),'STRING_LITERAL':([54,94,],[80,80,]),'ELSE':([55,75,],[-4,84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,3,28,51,52,84,],[2,10,10,75,76,90,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,28,],[5,56,]),'epsilon':([3,4,71,77,78,],[6,29,83,86,88,]),'statement':([3,28,],[7,7,]),'decl':([3,28,],[8,8,]),'expression':([3,16,17,18,20,22,23,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,54,82,94,],[9,45,47,48,50,51,52,9,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,79,89,79,]),'if_then_statement':([3,28,],[11,11,]),'while_statement':([3,28,],[12,12,]),'read_statement':([3,28,],[13,13,]),'write_statement':([3,28,],[14,14,]),'lvalue':([3,16,17,18,20,22,23,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,53,54,82,92,94,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,77,19,19,95,19,]),'identifier':([3,16,17,18,20,22,23,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,53,54,82,92,94,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'semicolon_opt':([4,],[27,]),'type':([44,],[71,]),'expr_string':([54,94,],[78,96,]),'Initiation':([71,],[81,]),'lvalue_list':([77,],[85,]),'expr_string_list':([78,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',142),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',147),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',148),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',155),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',160),
  ('statement -> block_statement','statement',1,'p_statement_A','miniFrontEnd.py',164),
  ('statement -> if_then_statement','statement',1,'p_statement_A','miniFrontEnd.py',165),
  ('statement -> while_statement','statement',1,'p_statement_A','miniFrontEnd.py',166),
  ('statement -> read_statement','statement',1,'p_statement_A','miniFrontEnd.py',167),
  ('statement -> write_statement','statement',1,'p_statement_A','miniFrontEnd.py',168),
  ('read_statement -> READ LPAREN lvalue lvalue_list RPAREN','read_statement',5,'p_read_statement','miniFrontEnd.py',172),
  ('lvalue_list -> lvalue_list COMMA lvalue','lvalue_list',3,'p_lvalue_list_A','miniFrontEnd.py',177),
  ('lvalue_list -> epsilon','lvalue_list',1,'p_lvalue_list_B','miniFrontEnd.py',182),
  ('write_statement -> WRITE LPAREN expr_string expr_string_list RPAREN','write_statement',5,'p_write_statement','miniFrontEnd.py',186),
  ('expr_string_list -> expr_string_list COMMA expr_string','expr_string_list',3,'p_expr_string_list_A','miniFrontEnd.py',192),
  ('expr_string_list -> epsilon','expr_string_list',1,'p_expr_string_list_B','miniFrontEnd.py',196),
  ('expr_string -> expression','expr_string',1,'p_expr_string_B','miniFrontEnd.py',200),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',207),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',212),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',216),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',221),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',222),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',227),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',234),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',238),
  ('if_then_statement -> IF expression block_statement','if_then_statement',3,'p_if_then_statement_A','miniFrontEnd.py',242),
  ('if_then_statement -> IF expression block_statement ELSE block_statement','if_then_statement',5,'p_if_then_statement_B','miniFrontEnd.py',246),
  ('while_statement -> WHILE expression block_statement','while_statement',3,'p_while_statement','miniFrontEnd.py',250),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',257),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',261),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',270),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',271),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',272),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',278),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',279),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',280),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',281),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',282),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',283),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',284),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',285),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',286),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',287),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',288),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',289),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',290),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',291),
  ('expression -> lvalue EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',292),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',298),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',304),
  ('expr_string -> STRING_LITERAL','expr_string',1,'p_expression_string_literal','miniFrontEnd.py',309),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',314),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','miniFrontEnd.py',319),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',330),
]
