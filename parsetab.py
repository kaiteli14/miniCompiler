
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON DIVIDE ELSE EQUALS EXPONENT GREATER GREATER_EQ ID IF INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE RPAREN SEMICOLON STRING_LITERAL TIMES WHILEprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement : block_statement\n                 | if_then_statement\n                 | while_statementstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonif_then_statement : IF expression block_statementif_then_statement : IF expression block_statement ELSE block_statementwhile_statement : WHILE expression block_statementidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | lvalue EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALlvalue : identifierexpression : lvalueepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,17,19,22,24,41,42,43,44,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,74,],[3,3,-43,-41,-42,3,-22,-20,-23,-24,3,3,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,3,]),'$end':([1,2,49,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,17,19,22,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,75,76,],[-44,24,-10,-11,-12,-13,-5,-6,-7,-8,-20,-43,-41,-42,-22,-20,-23,-24,-4,-9,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,-21,-39,-40,-17,-19,-14,-16,-15,-18,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,17,19,22,23,24,25,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,75,76,],[-44,-44,-10,-11,-12,-13,-5,-6,-7,-8,-20,-43,-41,-42,49,-3,-2,-22,-20,-23,-24,-4,-9,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,-21,-39,-40,-17,-19,-14,-16,-15,-18,]),'ID':([3,14,15,16,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,72,],[13,42,42,42,42,42,42,13,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'PLUS':([3,9,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,72,75,],[14,26,-20,14,14,14,-43,14,-41,14,14,-42,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-22,-20,-23,-24,14,26,26,26,-25,-26,-27,-28,-29,-30,26,26,26,26,26,26,26,26,26,-40,14,26,]),'MINUS':([3,9,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,72,75,],[15,27,-20,15,15,15,-43,15,-41,15,15,-42,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-22,-20,-23,-24,15,27,27,27,-25,-26,-27,-28,-29,-30,27,27,27,27,27,27,27,27,27,-40,15,27,]),'NOT':([3,14,15,16,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,72,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'LPAREN':([3,14,15,16,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,72,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'INT_LITERAL':([3,14,15,16,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,72,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'IF':([3,24,],[20,20,]),'WHILE':([3,24,],[21,21,]),'EXPONENT':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[28,-20,-43,-41,-42,-22,-20,-23,-24,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-40,28,]),'TIMES':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[29,-20,-43,-41,-42,-22,-20,-23,-24,29,29,29,29,29,-27,-28,-29,-30,29,29,29,29,29,29,29,29,29,-40,29,]),'DIVIDE':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[30,-20,-43,-41,-42,-22,-20,-23,-24,30,30,30,30,30,-27,-28,-29,-30,30,30,30,30,30,30,30,30,30,-40,30,]),'MODULUS':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[31,-20,-43,-41,-42,-22,-20,-23,-24,31,31,31,31,31,-27,-28,-29,-30,31,31,31,31,31,31,31,31,31,-40,31,]),'LESS':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[32,-20,-43,-41,-42,-22,-20,-23,-24,32,32,32,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,32,32,32,32,32,-40,32,]),'LESS_EQ':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[33,-20,-43,-41,-42,-22,-20,-23,-24,33,33,33,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,33,33,33,33,33,-40,33,]),'GREATER':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[34,-20,-43,-41,-42,-22,-20,-23,-24,34,34,34,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,34,34,34,34,34,-40,34,]),'GREATER_EQ':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[35,-20,-43,-41,-42,-22,-20,-23,-24,35,35,35,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,35,35,35,35,35,-40,35,]),'IS_EQ':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[36,-20,-43,-41,-42,-22,-20,-23,-24,36,36,36,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,36,36,36,-40,36,]),'NOT_EQ':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[37,-20,-43,-41,-42,-22,-20,-23,-24,37,37,37,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,37,37,37,-40,37,]),'AND':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[38,-20,-43,-41,-42,-22,-20,-23,-24,38,38,38,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,38,38,-40,38,]),'OR':([9,13,17,19,22,41,42,43,44,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,75,],[39,-20,-43,-41,-42,-22,-20,-23,-24,39,39,39,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,39,-40,39,]),'COLON':([13,],[40,]),'EQUALS':([13,17,22,42,65,66,],[-20,45,-42,-20,72,-21,]),'RPAREN':([17,19,22,41,42,43,44,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,],[-43,-41,-42,-22,-20,-23,-24,68,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,]),'INT':([40,],[66,]),'ELSE':([49,69,],[-4,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,3,24,47,48,74,],[2,10,10,69,70,76,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,24,],[5,50,]),'epsilon':([3,4,65,],[6,25,73,]),'statement':([3,24,],[7,7,]),'decl':([3,24,],[8,8,]),'expression':([3,14,15,16,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,72,],[9,41,43,44,46,47,48,9,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,75,]),'if_then_statement':([3,24,],[11,11,]),'while_statement':([3,24,],[12,12,]),'lvalue':([3,14,15,16,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,72,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'identifier':([3,14,15,16,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,72,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'semicolon_opt':([4,],[23,]),'type':([40,],[65,]),'Initiation':([65,],[71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',134),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',139),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',140),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',147),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',152),
  ('statement -> block_statement','statement',1,'p_statement_A','miniFrontEnd.py',156),
  ('statement -> if_then_statement','statement',1,'p_statement_A','miniFrontEnd.py',157),
  ('statement -> while_statement','statement',1,'p_statement_A','miniFrontEnd.py',158),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',167),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',172),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',176),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',181),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',182),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',187),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',194),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',198),
  ('if_then_statement -> IF expression block_statement','if_then_statement',3,'p_if_then_statement_A','miniFrontEnd.py',202),
  ('if_then_statement -> IF expression block_statement ELSE block_statement','if_then_statement',5,'p_if_then_statement_B','miniFrontEnd.py',206),
  ('while_statement -> WHILE expression block_statement','while_statement',3,'p_while_statement','miniFrontEnd.py',210),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',217),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',221),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',230),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',231),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',232),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',238),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',239),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',240),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',241),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',242),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',243),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',244),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',245),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',246),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',247),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',248),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',249),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',250),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',251),
  ('expression -> lvalue EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',252),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',258),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',264),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',269),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','miniFrontEnd.py',274),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',285),
]
