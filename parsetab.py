
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON DIVIDE EQUALS EXPONENT GREATER GREATER_EQ ID INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE RPAREN SEMICOLON TIMESprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement : block_statementstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | identifier EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : identifierepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,19,],[3,3,3,]),'$end':([1,2,42,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,15,17,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,],[-38,19,-8,-9,-10,-11,-5,-6,-15,-37,-36,-17,-15,-18,-19,-4,-7,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-38,-16,-34,-35,-12,-14,-13,]),'RBRACE':([3,4,5,6,7,8,9,10,11,15,17,18,19,20,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,],[-38,-38,-8,-9,-10,-11,-5,-6,-15,-37,-36,42,-3,-2,-17,-15,-18,-19,-4,-7,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-38,-16,-34,-35,-12,-14,-13,]),'ID':([3,12,13,14,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,40,63,],[11,37,37,37,37,11,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'PLUS':([3,9,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,63,65,],[12,21,-15,12,12,12,-37,12,-36,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-17,-15,-18,-19,12,21,-20,-21,-22,-23,-24,-25,21,21,21,21,21,21,21,21,21,-35,12,21,]),'MINUS':([3,9,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,63,65,],[13,22,-15,13,13,13,-37,13,-36,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-17,-15,-18,-19,13,22,-20,-21,-22,-23,-24,-25,22,22,22,22,22,22,22,22,22,-35,13,22,]),'NOT':([3,12,13,14,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,40,63,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'LPAREN':([3,12,13,14,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,40,63,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'INT_LITERAL':([3,12,13,14,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,40,63,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'EXPONENT':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[23,-15,-37,-36,-17,-15,-18,-19,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-35,23,]),'TIMES':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[24,-15,-37,-36,-17,-15,-18,-19,24,24,24,-22,-23,-24,-25,24,24,24,24,24,24,24,24,24,-35,24,]),'DIVIDE':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[25,-15,-37,-36,-17,-15,-18,-19,25,25,25,-22,-23,-24,-25,25,25,25,25,25,25,25,25,25,-35,25,]),'MODULUS':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[26,-15,-37,-36,-17,-15,-18,-19,26,26,26,-22,-23,-24,-25,26,26,26,26,26,26,26,26,26,-35,26,]),'LESS':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[27,-15,-37,-36,-17,-15,-18,-19,27,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,27,27,27,27,27,-35,27,]),'LESS_EQ':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[28,-15,-37,-36,-17,-15,-18,-19,28,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,28,28,28,28,28,-35,28,]),'GREATER':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[29,-15,-37,-36,-17,-15,-18,-19,29,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,29,29,29,29,29,-35,29,]),'GREATER_EQ':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[30,-15,-37,-36,-17,-15,-18,-19,30,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,30,30,30,30,30,-35,30,]),'IS_EQ':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[31,-15,-37,-36,-17,-15,-18,-19,31,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,31,31,31,-35,31,]),'NOT_EQ':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[32,-15,-37,-36,-17,-15,-18,-19,32,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,32,32,32,-35,32,]),'AND':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[33,-15,-37,-36,-17,-15,-18,-19,33,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,33,33,-35,33,]),'OR':([9,11,15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,65,],[34,-15,-37,-36,-17,-15,-18,-19,34,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,34,-35,34,]),'COLON':([11,],[35,]),'EQUALS':([11,15,37,58,59,],[-15,40,-15,63,-16,]),'RPAREN':([15,17,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,],[-37,-36,-17,-15,-18,-19,61,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,]),'INT':([35,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,3,19,],[2,10,10,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,19,],[5,43,]),'epsilon':([3,4,58,],[6,20,64,]),'statement':([3,19,],[7,7,]),'decl':([3,19,],[8,8,]),'expression':([3,12,13,14,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,40,63,],[9,36,38,39,41,9,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,65,]),'identifier':([3,12,13,14,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,40,63,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'semicolon_opt':([4,],[18,]),'type':([35,],[58,]),'Initiation':([58,],[62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',131),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',136),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',137),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',144),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',149),
  ('statement -> block_statement','statement',1,'p_statement_A','miniFrontEnd.py',153),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',162),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',167),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',171),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',176),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',177),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',182),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',189),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',193),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',199),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',203),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',212),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',213),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',214),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',220),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',221),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',222),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',223),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',224),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',225),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',226),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',227),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',228),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',229),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',230),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',231),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',232),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',233),
  ('expression -> identifier EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',234),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',240),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',246),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',252),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',261),
]
