
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON DIVIDE EQUALS EXPONENT GREATER GREATER_EQ ID INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE RPAREN SEMICOLON TIMESprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | identifier EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : identifierepsilon :'
    
_lr_action_items = {'LBRACE':([0,],[3,]),'$end':([1,2,41,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,14,16,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,],[-37,18,-7,-8,-9,-10,-5,-14,-36,-35,-16,-14,-17,-18,-6,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-37,-15,-33,-34,-11,-13,-12,]),'RBRACE':([3,4,5,6,7,8,9,10,14,16,17,18,19,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,],[-37,-37,-7,-8,-9,-10,-5,-14,-36,-35,41,-3,-2,-16,-14,-17,-18,-6,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-37,-15,-33,-34,-11,-13,-12,]),'ID':([3,11,12,13,15,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,62,],[10,36,36,36,36,10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'PLUS':([3,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,62,64,],[11,20,-14,11,11,11,-36,11,-35,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-16,-14,-17,-18,11,20,-19,-20,-21,-22,-23,-24,20,20,20,20,20,20,20,20,20,-34,11,20,]),'MINUS':([3,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,62,64,],[12,21,-14,12,12,12,-36,12,-35,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-16,-14,-17,-18,12,21,-19,-20,-21,-22,-23,-24,21,21,21,21,21,21,21,21,21,-34,12,21,]),'NOT':([3,11,12,13,15,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,62,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LPAREN':([3,11,12,13,15,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,62,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'INT_LITERAL':([3,11,12,13,15,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,62,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'EXPONENT':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[22,-14,-36,-35,-16,-14,-17,-18,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-34,22,]),'TIMES':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[23,-14,-36,-35,-16,-14,-17,-18,23,23,23,-21,-22,-23,-24,23,23,23,23,23,23,23,23,23,-34,23,]),'DIVIDE':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[24,-14,-36,-35,-16,-14,-17,-18,24,24,24,-21,-22,-23,-24,24,24,24,24,24,24,24,24,24,-34,24,]),'MODULUS':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[25,-14,-36,-35,-16,-14,-17,-18,25,25,25,-21,-22,-23,-24,25,25,25,25,25,25,25,25,25,-34,25,]),'LESS':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[26,-14,-36,-35,-16,-14,-17,-18,26,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,26,26,26,26,26,-34,26,]),'LESS_EQ':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[27,-14,-36,-35,-16,-14,-17,-18,27,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,27,27,27,27,27,-34,27,]),'GREATER':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[28,-14,-36,-35,-16,-14,-17,-18,28,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,28,28,28,28,28,-34,28,]),'GREATER_EQ':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[29,-14,-36,-35,-16,-14,-17,-18,29,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,29,29,29,29,29,-34,29,]),'IS_EQ':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[30,-14,-36,-35,-16,-14,-17,-18,30,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,30,30,30,-34,30,]),'NOT_EQ':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[31,-14,-36,-35,-16,-14,-17,-18,31,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,31,31,31,-34,31,]),'AND':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[32,-14,-36,-35,-16,-14,-17,-18,32,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,32,32,-34,32,]),'OR':([9,10,14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[33,-14,-36,-35,-16,-14,-17,-18,33,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,33,-34,33,]),'COLON':([10,],[34,]),'EQUALS':([10,14,36,57,58,],[-14,39,-14,62,-15,]),'RPAREN':([14,16,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,],[-36,-35,-16,-14,-17,-18,60,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,]),'INT':([34,],[58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,],[2,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,18,],[5,42,]),'epsilon':([3,4,57,],[6,19,63,]),'statement':([3,18,],[7,7,]),'decl':([3,18,],[8,8,]),'expression':([3,11,12,13,15,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,62,],[9,35,37,38,40,9,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,64,]),'identifier':([3,11,12,13,15,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,62,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'semicolon_opt':([4,],[17,]),'type':([34,],[57,]),'Initiation':([57,],[61,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',131),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',136),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',137),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',144),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',149),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',154),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',159),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',163),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',168),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',169),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',174),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',181),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',185),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',191),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',195),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',204),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',205),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',206),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',212),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',213),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',214),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',215),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',216),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',217),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',218),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',219),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',220),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',221),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',222),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',223),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',224),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',225),
  ('expression -> identifier EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',226),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',232),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',238),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',244),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',253),
]
