
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON COMMA DIVIDE ELSE EQUALS EXPONENT GREATER GREATER_EQ ID IF INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES WHILE WRITEprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement : block_statement\n                 | if_then_statement\n                 | while_statement\n                 | read_statementread_statement : READ LPAREN lvalue lvalue_list RPARENlvalue_list : lvalue_list COMMA lvaluelvalue_list : epsilonstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonif_then_statement : IF expression block_statementif_then_statement : IF expression block_statement ELSE block_statementwhile_statement : WHILE expression block_statementidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | lvalue EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : STRING_LITERALlvalue : identifierexpression : lvalueepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,18,20,21,25,27,44,45,46,47,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,79,],[3,3,-48,-45,-46,-47,3,-26,-24,-27,-28,3,3,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,3,]),'$end':([1,2,53,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,25,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,78,82,83,84,],[-49,27,-14,-15,-16,-17,-5,-6,-7,-8,-9,-24,-48,-45,-46,-47,-26,-24,-27,-28,-4,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-49,-25,-43,-44,-21,-23,-18,-20,-19,-22,-10,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,25,26,27,28,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,78,82,83,84,],[-49,-49,-14,-15,-16,-17,-5,-6,-7,-8,-9,-24,-48,-45,-46,-47,53,-3,-2,-26,-24,-27,-28,-4,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-49,-25,-43,-44,-21,-23,-18,-20,-19,-22,-10,]),'ID':([3,15,16,17,19,22,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,52,77,85,],[14,45,45,45,45,45,45,14,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'PLUS':([3,9,14,15,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,77,82,],[15,29,-24,15,15,15,-48,15,-45,-46,15,15,-47,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-26,-24,-27,-28,15,29,29,29,-29,-30,-31,-32,-33,-34,29,29,29,29,29,29,29,29,29,-44,15,29,]),'MINUS':([3,9,14,15,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,77,82,],[16,30,-24,16,16,16,-48,16,-45,-46,16,16,-47,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-26,-24,-27,-28,16,30,30,30,-29,-30,-31,-32,-33,-34,30,30,30,30,30,30,30,30,30,-44,16,30,]),'NOT':([3,15,16,17,19,22,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,77,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LPAREN':([3,15,16,17,19,22,23,24,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,77,],[19,19,19,19,19,19,19,52,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'INT_LITERAL':([3,15,16,17,19,22,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,77,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'STRING_LITERAL':([3,15,16,17,19,22,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,77,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'IF':([3,27,],[22,22,]),'WHILE':([3,27,],[23,23,]),'READ':([3,27,],[24,24,]),'EXPONENT':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[31,-24,-48,-45,-46,-47,-26,-24,-27,-28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-44,31,]),'TIMES':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[32,-24,-48,-45,-46,-47,-26,-24,-27,-28,32,32,32,32,32,-31,-32,-33,-34,32,32,32,32,32,32,32,32,32,-44,32,]),'DIVIDE':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[33,-24,-48,-45,-46,-47,-26,-24,-27,-28,33,33,33,33,33,-31,-32,-33,-34,33,33,33,33,33,33,33,33,33,-44,33,]),'MODULUS':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[34,-24,-48,-45,-46,-47,-26,-24,-27,-28,34,34,34,34,34,-31,-32,-33,-34,34,34,34,34,34,34,34,34,34,-44,34,]),'LESS':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[35,-24,-48,-45,-46,-47,-26,-24,-27,-28,35,35,35,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,35,35,35,35,35,-44,35,]),'LESS_EQ':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[36,-24,-48,-45,-46,-47,-26,-24,-27,-28,36,36,36,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,36,36,36,36,36,-44,36,]),'GREATER':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[37,-24,-48,-45,-46,-47,-26,-24,-27,-28,37,37,37,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,37,37,37,37,37,-44,37,]),'GREATER_EQ':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[38,-24,-48,-45,-46,-47,-26,-24,-27,-28,38,38,38,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,38,38,38,38,38,-44,38,]),'IS_EQ':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[39,-24,-48,-45,-46,-47,-26,-24,-27,-28,39,39,39,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,39,39,39,-44,39,]),'NOT_EQ':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[40,-24,-48,-45,-46,-47,-26,-24,-27,-28,40,40,40,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,40,40,40,-44,40,]),'AND':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[41,-24,-48,-45,-46,-47,-26,-24,-27,-28,41,41,41,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,41,41,-44,41,]),'OR':([9,14,18,20,21,25,44,45,46,47,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,],[42,-24,-48,-45,-46,-47,-26,-24,-27,-28,42,42,42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,42,-44,42,]),'COLON':([14,],[43,]),'EQUALS':([14,18,25,45,69,70,],[-24,48,-47,-24,77,-25,]),'RPAREN':([18,20,21,25,44,45,46,47,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,75,80,81,86,],[-48,-45,-46,-47,-26,-24,-27,-28,72,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-49,84,-12,-11,]),'COMMA':([25,45,75,80,81,86,],[-47,-24,-49,85,-12,-11,]),'INT':([43,],[70,]),'ELSE':([53,73,],[-4,79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,3,27,50,51,79,],[2,10,10,73,74,83,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,27,],[5,54,]),'epsilon':([3,4,69,75,],[6,28,78,81,]),'statement':([3,27,],[7,7,]),'decl':([3,27,],[8,8,]),'expression':([3,15,16,17,19,22,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,77,],[9,44,46,47,49,50,51,9,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,82,]),'if_then_statement':([3,27,],[11,11,]),'while_statement':([3,27,],[12,12,]),'read_statement':([3,27,],[13,13,]),'lvalue':([3,15,16,17,19,22,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,52,77,85,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,75,18,86,]),'identifier':([3,15,16,17,19,22,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,52,77,85,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'semicolon_opt':([4,],[26,]),'type':([43,],[69,]),'Initiation':([69,],[76,]),'lvalue_list':([75,],[80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',142),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',147),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',148),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',155),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',160),
  ('statement -> block_statement','statement',1,'p_statement_A','miniFrontEnd.py',164),
  ('statement -> if_then_statement','statement',1,'p_statement_A','miniFrontEnd.py',165),
  ('statement -> while_statement','statement',1,'p_statement_A','miniFrontEnd.py',166),
  ('statement -> read_statement','statement',1,'p_statement_A','miniFrontEnd.py',167),
  ('read_statement -> READ LPAREN lvalue lvalue_list RPAREN','read_statement',5,'p_read_statement','miniFrontEnd.py',171),
  ('lvalue_list -> lvalue_list COMMA lvalue','lvalue_list',3,'p_lvalue_list_A','miniFrontEnd.py',176),
  ('lvalue_list -> epsilon','lvalue_list',1,'p_lvalue_list_B','miniFrontEnd.py',181),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',188),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',193),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',197),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',202),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',203),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',208),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',215),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',219),
  ('if_then_statement -> IF expression block_statement','if_then_statement',3,'p_if_then_statement_A','miniFrontEnd.py',223),
  ('if_then_statement -> IF expression block_statement ELSE block_statement','if_then_statement',5,'p_if_then_statement_B','miniFrontEnd.py',227),
  ('while_statement -> WHILE expression block_statement','while_statement',3,'p_while_statement','miniFrontEnd.py',231),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',238),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',242),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',251),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',252),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',253),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',259),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',260),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',261),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',262),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',263),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',264),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',265),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',266),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',267),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',268),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',269),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',270),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',271),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',272),
  ('expression -> lvalue EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',273),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',279),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',285),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string_literal','miniFrontEnd.py',290),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',295),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','miniFrontEnd.py',300),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',311),
]
