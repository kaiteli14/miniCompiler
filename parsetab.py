
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftORleftANDleftIS_EQNOT_EQleftLESSLESS_EQGREATERGREATER_EQleftPLUSMINUSleftTIMESDIVIDEMODULUSrightEXPONENTleftUMINUSNOTAND COLON COMMA DIVIDE ELSE EQUALS EXPONENT GREATER GREATER_EQ ID IF INT INT_LITERAL IS_EQ LBRACE LESS LESS_EQ LPAREN MINUS MODULUS NOT NOT_EQ OR PLUS RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES WHILE WRITEprogram : block_statementsemicolon_opt : epsilon\n                     | SEMICOLONblock_statement : LBRACE statement_decl_list semicolon_opt RBRACEstatement : expressionstatement : block_statement\n                 | if_then_statement\n                 | while_statementstatement_decl_list : statement_decl_list SEMICOLON statement_declstatement_decl_list : statement_declstatement_decl_list : epsilonstatement_decl : statement\n                      | decldecl : ID COLON type InitiationInitiation : EQUALS expressionInitiation : epsilonif_then_statement : IF expression block_statementif_then_statement : IF expression block_statement ELSE block_statementwhile_statement : WHILE expression block_statementidentifier : IDtype : INTexpression : PLUS expression %prec UMINUS\n                  | MINUS expression %prec UMINUS\n                  | NOT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression EXPONENT expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression LESS expression\n                  | expression LESS_EQ expression\n                  | expression GREATER expression\n                  | expression GREATER_EQ expression\n                  | expression IS_EQ expression\n                  | expression NOT_EQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | lvalue EQUALS expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : STRING_LITERALlvalue : identifierexpression : lvalueepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,17,19,20,23,25,42,43,44,45,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,75,],[3,3,-44,-41,-42,-43,3,-22,-20,-23,-24,3,3,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,3,]),'$end':([1,2,50,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,17,19,20,23,42,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,76,77,],[-45,25,-10,-11,-12,-13,-5,-6,-7,-8,-20,-44,-41,-42,-43,-22,-20,-23,-24,-4,-9,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-45,-21,-39,-40,-17,-19,-14,-16,-15,-18,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,17,19,20,23,24,25,26,42,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,76,77,],[-45,-45,-10,-11,-12,-13,-5,-6,-7,-8,-20,-44,-41,-42,-43,50,-3,-2,-22,-20,-23,-24,-4,-9,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-45,-21,-39,-40,-17,-19,-14,-16,-15,-18,]),'ID':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[13,43,43,43,43,43,43,13,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'PLUS':([3,9,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,73,76,],[14,27,-20,14,14,14,-44,14,-41,-42,14,14,-43,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-22,-20,-23,-24,14,27,27,27,-25,-26,-27,-28,-29,-30,27,27,27,27,27,27,27,27,27,-40,14,27,]),'MINUS':([3,9,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,73,76,],[15,28,-20,15,15,15,-44,15,-41,-42,15,15,-43,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-22,-20,-23,-24,15,28,28,28,-25,-26,-27,-28,-29,-30,28,28,28,28,28,28,28,28,28,-40,15,28,]),'NOT':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'LPAREN':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'INT_LITERAL':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'STRING_LITERAL':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'IF':([3,25,],[21,21,]),'WHILE':([3,25,],[22,22,]),'EXPONENT':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[29,-20,-44,-41,-42,-43,-22,-20,-23,-24,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-40,29,]),'TIMES':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[30,-20,-44,-41,-42,-43,-22,-20,-23,-24,30,30,30,30,30,-27,-28,-29,-30,30,30,30,30,30,30,30,30,30,-40,30,]),'DIVIDE':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[31,-20,-44,-41,-42,-43,-22,-20,-23,-24,31,31,31,31,31,-27,-28,-29,-30,31,31,31,31,31,31,31,31,31,-40,31,]),'MODULUS':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[32,-20,-44,-41,-42,-43,-22,-20,-23,-24,32,32,32,32,32,-27,-28,-29,-30,32,32,32,32,32,32,32,32,32,-40,32,]),'LESS':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[33,-20,-44,-41,-42,-43,-22,-20,-23,-24,33,33,33,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,33,33,33,33,33,-40,33,]),'LESS_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[34,-20,-44,-41,-42,-43,-22,-20,-23,-24,34,34,34,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,34,34,34,34,34,-40,34,]),'GREATER':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[35,-20,-44,-41,-42,-43,-22,-20,-23,-24,35,35,35,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,35,35,35,35,35,-40,35,]),'GREATER_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[36,-20,-44,-41,-42,-43,-22,-20,-23,-24,36,36,36,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,36,36,36,36,36,-40,36,]),'IS_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[37,-20,-44,-41,-42,-43,-22,-20,-23,-24,37,37,37,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,37,37,37,-40,37,]),'NOT_EQ':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[38,-20,-44,-41,-42,-43,-22,-20,-23,-24,38,38,38,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,38,38,38,-40,38,]),'AND':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[39,-20,-44,-41,-42,-43,-22,-20,-23,-24,39,39,39,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,39,39,-40,39,]),'OR':([9,13,17,19,20,23,42,43,44,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,76,],[40,-20,-44,-41,-42,-43,-22,-20,-23,-24,40,40,40,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,40,-40,40,]),'COLON':([13,],[41,]),'EQUALS':([13,17,23,43,66,67,],[-20,46,-43,-20,73,-21,]),'RPAREN':([17,19,20,23,42,43,44,45,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,],[-44,-41,-42,-43,-22,-20,-23,-24,69,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,]),'INT':([41,],[67,]),'ELSE':([50,70,],[-4,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_statement':([0,3,25,48,49,75,],[2,10,10,70,71,77,]),'statement_decl_list':([3,],[4,]),'statement_decl':([3,25,],[5,51,]),'epsilon':([3,4,66,],[6,26,74,]),'statement':([3,25,],[7,7,]),'decl':([3,25,],[8,8,]),'expression':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[9,42,44,45,47,48,49,9,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,76,]),'if_then_statement':([3,25,],[11,11,]),'while_statement':([3,25,],[12,12,]),'lvalue':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'identifier':([3,14,15,16,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,73,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'semicolon_opt':([4,],[24,]),'type':([41,],[66,]),'Initiation':([66,],[72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_statement','program',1,'p_program','miniFrontEnd.py',142),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',147),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',148),
  ('block_statement -> LBRACE statement_decl_list semicolon_opt RBRACE','block_statement',4,'p_block_statement','miniFrontEnd.py',155),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',160),
  ('statement -> block_statement','statement',1,'p_statement_A','miniFrontEnd.py',164),
  ('statement -> if_then_statement','statement',1,'p_statement_A','miniFrontEnd.py',165),
  ('statement -> while_statement','statement',1,'p_statement_A','miniFrontEnd.py',166),
  ('statement_decl_list -> statement_decl_list SEMICOLON statement_decl','statement_decl_list',3,'p_statement_decl_list_A','miniFrontEnd.py',187),
  ('statement_decl_list -> statement_decl','statement_decl_list',1,'p_statement_decl_list_B','miniFrontEnd.py',192),
  ('statement_decl_list -> epsilon','statement_decl_list',1,'p_statement_decl_list_C','miniFrontEnd.py',196),
  ('statement_decl -> statement','statement_decl',1,'p_statement_decl','miniFrontEnd.py',201),
  ('statement_decl -> decl','statement_decl',1,'p_statement_decl','miniFrontEnd.py',202),
  ('decl -> ID COLON type Initiation','decl',4,'p_decl','miniFrontEnd.py',207),
  ('Initiation -> EQUALS expression','Initiation',2,'p_with_initiation','miniFrontEnd.py',214),
  ('Initiation -> epsilon','Initiation',1,'p_no_initiation','miniFrontEnd.py',218),
  ('if_then_statement -> IF expression block_statement','if_then_statement',3,'p_if_then_statement_A','miniFrontEnd.py',222),
  ('if_then_statement -> IF expression block_statement ELSE block_statement','if_then_statement',5,'p_if_then_statement_B','miniFrontEnd.py',226),
  ('while_statement -> WHILE expression block_statement','while_statement',3,'p_while_statement','miniFrontEnd.py',230),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',237),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',241),
  ('expression -> PLUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',250),
  ('expression -> MINUS expression','expression',2,'p_expression_uniop','miniFrontEnd.py',251),
  ('expression -> NOT expression','expression',2,'p_expression_uniop','miniFrontEnd.py',252),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',258),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',259),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',260),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',261),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',262),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',263),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','miniFrontEnd.py',264),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',265),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','miniFrontEnd.py',266),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',267),
  ('expression -> expression IS_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',268),
  ('expression -> expression NOT_EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',269),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',270),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',271),
  ('expression -> lvalue EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',272),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',278),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',284),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string_literal','miniFrontEnd.py',289),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',294),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','miniFrontEnd.py',299),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',310),
]
